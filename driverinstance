package com.automation.driver;

import org.openqa.selenium.Dimension;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.support.ui.WebDriverWait;

import java.time.Duration;
import java.util.HashMap;
import java.util.Map;

public class DriverInstance {

    private static final ThreadLocal<RemoteWebDriver> remoteWebDriver = new ThreadLocal<RemoteWebDriver>();
    private static final ThreadLocal<WebDriverWait> wait = new ThreadLocal<WebDriverWait>();

    public void setWait() {
        wait.set(new WebDriverWait(getDriver(), Duration.ofSeconds(15)));
    }

    public WebDriverWait getWait() {
        return wait.get();
    }

    public void setDriver(String browser, boolean headless) {
        // Detect if running in CI/CD environment (Azure Pipelines, Jenkins, etc.)
        boolean isCI = System.getenv("BUILD_BUILDID") != null || // Azure Pipelines
                       System.getenv("JENKINS_URL") != null ||    // Jenkins
                       System.getenv("CI") != null ||             // Generic CI flag
                       System.getenv("GITHUB_ACTIONS") != null;   // GitHub Actions
        
        switch (browser.toLowerCase()) {
            case "chrome":
                ChromeOptions options = new ChromeOptions();
                
                if (headless || isCI) {
                    // Force headless mode in CI environments
                    options.addArguments("--headless=new");
                    options.addArguments("--window-size=1920,1080");
                    options.addArguments("--no-sandbox");
                    options.addArguments("--disable-dev-shm-usage");
                    options.addArguments("--disable-web-security");
                    options.addArguments("--allow-running-insecure-content");
                    options.addArguments("--disable-gpu");
                    options.addArguments("--disable-extensions");
                    options.addArguments("--disable-plugins");
                    options.addArguments("--remote-debugging-port=0");
                } else {
                    // Local development - try to maximize but fallback to fixed size
                    options.addArguments("--start-maximized");
                    options.addArguments("--disable-web-security");
                    options.addArguments("--allow-running-insecure-content");
                }
                
                // Common arguments for both modes
                options.addArguments("--disable-notifications");
                options.addArguments("--no-sandbox");
                options.addArguments("--disable-dev-shm-usage");
                options.addArguments("--disable-blink-features=AutomationControlled");
                options.setAcceptInsecureCerts(true);
                
                // Set download preferences
                Map<String, Object> prefs = new HashMap<String, Object>();
                prefs.put("download.default_directory", System.getProperty("user.dir") + "\\ExportedFiles");
                prefs.put("safebrowsing.enabled", true);
                prefs.put("profile.default_content_settings.popups", 0);
                options.setExperimentalOption("prefs", prefs);
                
                remoteWebDriver.set(new ChromeDriver(options));
                
                // For CI environments or headless, window size is set via arguments
                // For local non-headless, ensure window is properly sized
                if (!headless && !isCI) {
                    try {
                        Thread.sleep(500); // Brief wait for initialization
                        remoteWebDriver.get().manage().window().maximize();
                    } catch (Exception e) {
                        // Fallback to fixed size if maximize fails
                        remoteWebDriver.get().manage().window().setSize(new Dimension(1920, 1080));
                    }
                }
                break;
                
            case "firefox":
                remoteWebDriver.set(new FirefoxDriver());
                if (!headless && !isCI) {
                    try {
                        remoteWebDriver.get().manage().window().maximize();
                    } catch (Exception e) {
                        remoteWebDriver.get().manage().window().setSize(new Dimension(1920, 1080));
                    }
                }
                break;
                
            case "edge":
                remoteWebDriver.set(new EdgeDriver());
                if (!headless && !isCI) {
                    try {
                        remoteWebDriver.get().manage().window().maximize();
                    } catch (Exception e) {
                        remoteWebDriver.get().manage().window().setSize(new Dimension(1920, 1080));
                    }
                }
                break;
                
            case "ie":
                remoteWebDriver.set(new InternetExplorerDriver());
                if (!headless && !isCI) {
                    try {
                        remoteWebDriver.get().manage().window().maximize();
                    } catch (Exception e) {
                        remoteWebDriver.get().manage().window().setSize(new Dimension(1920, 1080));
                    }
                }
                break;
                
            default:
                throw new IllegalArgumentException("Unsupported browser: " + browser);
        }
        
        // Set implicit wait and other timeouts
        remoteWebDriver.get().manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
        remoteWebDriver.get().manage().timeouts().pageLoadTimeout(Duration.ofSeconds(30));
        remoteWebDriver.get().manage().timeouts().scriptTimeout(Duration.ofSeconds(30));
    }

    public RemoteWebDriver getDriver() {
        return remoteWebDriver.get();
    }
    
    public void quitDriver() {
        if (remoteWebDriver.get() != null) {
            remoteWebDriver.get().quit();
            remoteWebDriver.remove();
        }
        if (wait.get() != null) {
            wait.remove();
        }
    }
    
    // Utility method to ensure proper window sizing
    public void ensureWindowSize(int width, int height) {
        if (getDriver() != null) {
            getDriver().manage().window().setSize(new Dimension(width, height));
            getDriver().manage().window().setPosition(new org.openqa.selenium.Point(0, 0));
        }
    }
}